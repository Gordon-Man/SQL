KEYWORDS:

SELECT   - select data from a table, you can specify columns or use * to refer to all columns
FROM     - specifies table to select from
WHERE    - condition for selected data
DISTINCT - only return unique values in query, used in tandem with select ex: SELECT DISTINCT (column names)
COUNT    - returns the number of queried items, used in tandem with SELECT, ex: SELECT COUNT (column names)
LIKE     - used to specify a pattern match with the WHERE clause, such as names starting with A, ex: WHERE names LIKE "A%";
               refer to https://www.w3schools.com/sql/sql_like.asp for more examples using LIKE
               refer to https://www.w3schools.com/sql/sql_wildcards.asp for more wild card examples
AND      - used in conjunction with WHERE to specify two different conditions that must be met in order to select from.
OR       - also used in conjunction with WHERE to specify multiple conditions that can satisfy the search (WHERE this OR that)
NOT      - changes the condition to anything that isn't the specified condition, used after WHERE and AND. ex: WHERE NOT country = 'USA'
ORDER BY - column name is appended after this keyword to dictate the sorting of the result set. 
               can have multiple column names to determine what follows the sorting method if duplicates of first column
               ASC and DESC can be used after each column name
INSERT INTO / VALUES - inserts a record into a table. you can specify which columns and provide values for specified columns.
NULL     - field with no value, can be used in a WHERE statement used with IS, ex: WHERE country IS NOT NULL/IS NULL
UPDATE   - takes a table parameter, used with a SET statement in next line, where set defines the columns to change to given value SET City = 'Oakland'
               The UPDATE keyword takes a WHERE clause at the last line to specify which records to update, otherwise it will update all the records. 
DELETE   - Removes records in existing table, must specify the WHERE clause otherwise all records are deleted. ex: DELETE FROM table_name WHERE condition;     
LIMIT    - specifies a number of items that can be returned from a query. can't go past the limit.
TOP      - used in tandem with SELECT to return X number of items or percentage. (same thing as limit)
AS       - allows you to rename the title of the result set. use AS after the columns specified in the SELECT statement
MIN/MAX  - allows you to find the smallest or largest value in a column, ex: SELECT MIN(Price) //returns the smallest price value in Price column
AVG      - used after SELECT, ex: SELECT AVG(Column Name), returns the average of all records
SUM      - returns the sum of all records, ex: SELECT SUM(Column_Name)
IN       - shorthand for OR operator, used in WHERE clause. ex: WHERE country IN ('Germany', 'France', 'Poland');
BETWEEN  - allows you to narrow your filter to a range between two numbers, text or date. ex: WHERE age BETWEEN 10 AND 20;

JOIN     - consider table 1 and table 2, left == table 1, right == table 2

INNER JOIN: finds matches that are in both tables. (Intersection of two tables)

              ex: 




EXAMPLE QUERIES:

SELECT column1, column2, ...
FROM table_name;

//The SELECT statement is used to select data from a database.
//The data returned is stored in a result table, called the result-set.

SELECT * FROM (table_name);

//Wild card can be used to select every column from a table

SELECT DISTINCT column1, column2, ...
FROM table_name;

//Distinct only grabs information that are unique in the specified columns, duplicates are not going to be stored in the result-set.

SELECT COUNT(DISTINCT Country) FROM Customers;

//Count keyword lets you return the number of selected items in the query. This query will return the number of distinct countries available
//inside the Custoemrs table.

SELECT column1, column2, ...
FROM table_name
WHERE condition;

//WHERE keyword allows you to add a condition. We want information from column 1 and 2 from table, where x condition exists.
//example, we want to know the cities that have a population count of at least 1million, from the California cities table.

SELECT * FROM California_Cities
WHERE population >= 1000000;

SELECT * FROM California_Cities
WHERE name LIKE 'L%';

//This last query uses wildcards, this will search for all cities that have a name that starts with

SELECT column1, column2, ...
FROM table_name
ORDER BY column1, column2, ... ASC|DESC;

//Order by will sort customers by Country name in ascending order by default, if duplicate country names, 
//the second method of sorting will be by customer name

INSERT INTO Customers (CustomerName, City, Country)
VALUES ('Cardinal', 'Stavanger', 'Norway');

//Inserts data into the customers table, this will generate a new record. Each value is corresponding to each parameter in the Insert Into list.

UPDATE Customers
SET ContactName='Juan', City = San Francisco
WHERE Country='Mexico';

//Updates an existing table, can update one or more records. it is all dependent on the WHERE clause.

SELECT * FROM Orders
WHERE OrderDate BETWEEN '1996-07-01' AND '1996-07-31';

//BETWEEN operator allows you to specify a range to search


